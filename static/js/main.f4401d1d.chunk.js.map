{"version":3,"sources":["components/fish.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Fish","name","description","latin","image","className","src","alt","FishHeader","App","useState","data","setData","useEffect","a","axios","result","console","log","getFish","onClick","sortedData","sort","b","nameA","commonname","toUpperCase","nameB","sortA2Z","sortZ2A","map","item","key","id","latinname","narrative","imageurl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAoBeA,EAlBK,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAE9C,OACE,yBAAKC,UAAU,QACX,wBAAIA,UAAU,gBAAgBJ,GAC5BE,EACA,2BAAG,+CAAH,IAAiCA,EAAjC,KACE,KAEFC,EACA,yBAAKE,IAAKF,EAAOG,IAAKN,IACpB,KAEJ,2BAAIC,KCJGM,EATW,WAExB,OACE,gCACE,+CCgFSC,MAhFf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,KAqDb,OAjDAC,oBAAW,YAEI,sCAAG,4BAAAC,EAAA,qEACOC,IACnB,qDAFY,OACRC,EADQ,OAIdC,QAAQC,IAAIF,EAAOL,MACnBC,EAAQI,EAAOL,MALD,yCAAH,qDAQbQ,IAEC,IAsCD,yBAAKd,UAAU,UACb,kBAAC,EAAD,MACA,8BACE,6BACE,gCACE,iCACA,4BAAQe,QAAS,kBAzCX,WACd,IAAIC,EAAU,YAAOV,GAErBU,EAAWC,KAAK,SAASR,EAAGS,GAC1B,IAAIC,EAAQV,EAAEW,WAAWC,cACrBC,EAAQJ,EAAEE,WAAWC,cACzB,OAAIF,EAAQG,GACF,EAENH,EAAQG,EACH,EAEJ,IAEPf,EAAQS,GA2BsBO,KAAtB,OACA,4BAAQR,QAAS,kBAzBX,WACd,IAAIC,EAAU,YAAOV,GAErBU,EAAWC,KAAK,SAASR,EAAGS,GAC1B,IAAIC,EAAQV,EAAEW,WAAWC,cACrBC,EAAQJ,EAAEE,WAAWC,cACzB,OAAIC,EAAQH,GACF,EAENG,EAAQH,EACH,EAEJ,IAEPZ,EAAQS,GAWsBQ,KAAtB,SAGJ,6BACClB,EAAKmB,IAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACVhC,KAAM8B,EAAKN,WACXtB,MAAO4B,EAAKG,UACZhC,YAAa6B,EAAKI,UAClB/B,MAAO2B,EAAKK,iBCjEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f4401d1d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Fish = ({name, description, latin, image}) => {\r\n\r\n  return (\r\n    <div className=\"fish\">\r\n        <h2 className=\"fish__header\">{name}</h2>\r\n        { latin ?  \r\n          <p><strong>Latin Name:</strong> {latin} </p>\r\n          : null\r\n        }\r\n        { image ?\r\n          <img src={image} alt={name} />\r\n          : null \r\n        }\r\n        <p>{description}</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Fish;","import React from 'react';\r\n\r\nexport const FishHeader = () => {\r\n\r\n  return (\r\n    <header>  \r\n      <h1>Michigan Fish</h1>\r\n    </header>\r\n    )\r\n}\r\n\r\nexport default FishHeader;","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport Fish from './components/fish.js';\nimport FishHeader from './components/header.js';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n\n  useEffect( () => {\n    \n    const getFish = async () => {\n      const result = await axios(\n        'https://data.michigan.gov/resource/he9h-7fpa.json',\n      );\n      console.log(result.data);\n      setData(result.data);\n    }\n\n    getFish();\n\n  }, []);\n\n\n  const sortA2Z = () => {\n    let sortedData = [...data];\n\n    sortedData.sort(function(a, b) {\n      var nameA = a.commonname.toUpperCase(); // ignore upper and lowercase\n      var nameB = b.commonname.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n    return 0;\n    });\n    setData(sortedData);\n  }\n\n  const sortZ2A = () => {\n    let sortedData = [...data];\n\n    sortedData.sort(function(a, b) {\n      var nameA = a.commonname.toUpperCase(); // ignore upper and lowercase\n      var nameB = b.commonname.toUpperCase(); // ignore upper and lowercase\n      if (nameB < nameA) {\n        return -1;\n      }\n      if (nameB > nameA) {\n        return 1;\n      }\n    return 0;\n    });\n    setData(sortedData);\n  }\n\n  return (\n    <div className=\"holder\">\n      <FishHeader />\n      <main>\n        <div>\n          <select>\n            <option></option>\n            <option onClick={()=> sortA2Z()}>A-Z</option>\n            <option onClick={()=> sortZ2A()}>Z-A</option>\n          </select>\n        </div>\n        <div>\n        {data.map(item => (\n          <Fish \n            key={item.id} \n            name={item.commonname} \n            latin={item.latinname} \n            description={item.narrative}\n            image={item.imageurl} \n          />\n        ))}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}